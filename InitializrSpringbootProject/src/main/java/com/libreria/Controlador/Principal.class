import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Optional;
import java.util.Scanner;

@Component
public class Principal {

    private final Scanner scanner = new Scanner(System.in);
    private final LibroService libroService;
    private final LibroRepository libroRepository;
    private final AutorRepository autorRepository;

    @Autowired // Spring inyecta las dependencias necesarias
    public Principal(LibroService libroService, LibroRepository libroRepository, AutorRepository autorRepository) {
        this.libroService = libroService;
        this.libroRepository = libroRepository;
        this.autorRepository = autorRepository;
    }

    public void mostrarMenu() {
        while (true) {
            System.out.println("\n--- MENÚ PRINCIPAL ---");
            System.out.println("1. Buscar libro por título (y guardarlo)");
            System.out.println("2. Listar libros registrados");
            System.out.println("3. Listar autores registrados");
            System.out.println("0. Salir");
            System.out.print("Elija una opción: ");

            try {
                int opcion = Integer.parseInt(scanner.nextLine());
                switch (opcion) {
                    case 1:
                        buscarYGuardarLibro();
                        break;
                    case 2:
                        listarLibrosRegistrados();
                        break;
                    case 3:
                        listarAutoresRegistrados();
                        break;
                    case 0:
                        System.out.println("Cerrando la aplicación...");
                        return; // Sale del método y termina el programa
                    default:
                        System.out.println("Opción no válida.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Por favor, ingrese un número válido.");
            }
        }
    }

    private void buscarYGuardarLibro() {
        System.out.print("Ingrese el título del libro a buscar: ");
        String titulo = scanner.nextLine();

        // 1. Busca en la API de Gutendex
        List<Libro> librosApi = libroService.buscarLibrosPorTitulo(titulo);

        if (librosApi.isEmpty()) {
            System.out.println("Libro no encontrado en la API de Gutendex.");
            return;
        }

        Libro libroEncontrado = librosApi.get(0); // Tomamos el primer resultado

        // 2. Verifica si el libro ya está en la BD
        Optional<Libro> libroEnBD = libroRepository.findByTitleContainsIgnoreCase(libroEncontrado.getTitle());

        if (libroEnBD.isPresent()) {
            System.out.println("El libro ya está registrado en la base de datos.");
        } else {
            // 3. Si no está, lo guarda
            System.out.println("Libro no encontrado en la BD. Guardando...");
            libroRepository.save(libroEncontrado);
            System.out.println("Libro guardado con éxito.");
        }
        System.out.println(libroEncontrado);
    }

    private void listarLibrosRegistrados() {
        List<Libro> libros = libroRepository.findAll();
        if (libros.isEmpty()) {
            System.out.println("No hay libros registrados.");
        } else {
            System.out.println("\n--- Libros Registrados ---");
            libros.forEach(System.out::println);
        }
    }

    private void listarAutoresRegistrados() {
        List<Autor> autores = autorRepository.findAll();
        if (autores.isEmpty()) {
            System.out.println("No hay autores registrados.");
        } else {
            System.out.println("\n--- Autores Registrados ---");
            autores.forEach(System.out::println);
        }
    }
}